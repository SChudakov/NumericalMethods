/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.sschudakov.equationandsystem.ui;

import com.sschudakov.equationandsystem.manager.DichotomyMethodManager;
import com.sschudakov.equationandsystem.manager.JakobiMethodManager;
import com.sschudakov.equationandsystem.manager.NewtonMethodManager;
import com.sschudakov.equationandsystem.manager.SquareRootMethodManager;
import com.sschudakov.equationandsystem.task.Task;

import javax.swing.JOptionPane;

/**
 * @author Semen
 */
public class UIJFrame extends javax.swing.JFrame {

    /**
     * Creates new form InputWrodsJFrame
     */
    public UIJFrame() {
        initComponents();
        this.dichotomyMethodManager = new DichotomyMethodManager(Task.dichotomyFunction);
        this.newtonMethodManager = new NewtonMethodManager(Task.newtonFunction);
        this.squareRootMethodManager = new SquareRootMethodManager(Task.MATRIX, Task.RIGHT_PART);
        this.jakobiMethodManager = new JakobiMethodManager(Task.MATRIX, Task.RIGHT_PART);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainJTP = new javax.swing.JTabbedPane();
        dichotomyJP = new javax.swing.JPanel();
        dichotomyPrecisionJL = new javax.swing.JLabel();
        precisionJTF = new javax.swing.JTextField();
        aEndpointJLabel = new javax.swing.JLabel();
        bEndpointJLabel = new javax.swing.JLabel();
        aEndpointJTF = new javax.swing.JTextField();
        bEndpointJTF = new javax.swing.JTextField();
        dichotomySolutionJL = new javax.swing.JLabel();
        solutionJTF = new javax.swing.JTextField();
        dichotomySolveJButton = new javax.swing.JButton();
        dichotomyNOIJL = new javax.swing.JLabel();
        dichotomyNOIJTF = new javax.swing.JTextField();
        dichotomyENOIJTF = new javax.swing.JTextField();
        dichotomyFunctionValueJL = new javax.swing.JLabel();
        functionValueJTF = new javax.swing.JTextField();
        dichotomyENOIJL = new javax.swing.JLabel();
        newtonJP = new javax.swing.JPanel();
        xZeroJL = new javax.swing.JLabel();
        approximateSolutionJL = new javax.swing.JLabel();
        derivativeMinimumJL = new javax.swing.JLabel();
        sodmJL = new javax.swing.JLabel();
        newtonPrecisionJL = new javax.swing.JLabel();
        xZeroJTF = new javax.swing.JTextField();
        approximateSolutionJTF = new javax.swing.JTextField();
        derivativeMinimumJTF = new javax.swing.JTextField();
        sodmJTF = new javax.swing.JTextField();
        newtonPrecisionJTF = new javax.swing.JTextField();
        newtonSolveJB = new javax.swing.JButton();
        newtonSolutionJL = new javax.swing.JLabel();
        newtonFunctionValueJL = new javax.swing.JLabel();
        newtonNOIJL = new javax.swing.JLabel();
        newtonENOIJL = new javax.swing.JLabel();
        newtonSolutionJTF = new javax.swing.JTextField();
        newtonFunctionValueJTF = new javax.swing.JTextField();
        newtonNOIJTF = new javax.swing.JTextField();
        newtonENOIJTF = new javax.swing.JTextField();
        systemJL = new javax.swing.JPanel();
        systemPrecisionJL = new javax.swing.JLabel();
        straightForwardSolutionJL = new javax.swing.JLabel();
        iterateSolutionJL = new javax.swing.JLabel();
        conditionNumberJL = new javax.swing.JLabel();
        determinantJL = new javax.swing.JLabel();
        inverseMatrixJL = new javax.swing.JLabel();
        matrixProductJL = new javax.swing.JLabel();
        systemPrecisionJTF = new javax.swing.JTextField();
        straightForwardSolutionJTF = new javax.swing.JTextField();
        iterativeSolutionJTF = new javax.swing.JTextField();
        conditionNumberJTF = new javax.swing.JTextField();
        determinantJTF = new javax.swing.JTextField();
        solveSystemJB = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        inverseMatrixJTA = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        matrixProductJTA = new javax.swing.JTextArea();
        systemInitialSolutionJL = new javax.swing.JLabel();
        systemInitialSolutionJTF = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        dichotomyPrecisionJL.setText("precision");

        aEndpointJLabel.setText("a");

        bEndpointJLabel.setText("b");

        dichotomySolutionJL.setText("solution");

        dichotomySolveJButton.setText("solve");
        dichotomySolveJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dichotomySolveJButtonActionPerformed(evt);
            }
        });

        dichotomyNOIJL.setText("num of iterations");

        dichotomyFunctionValueJL.setText("FUNCTION value");

        dichotomyENOIJL.setText("expected number of iterations");

        javax.swing.GroupLayout dichotomyJPLayout = new javax.swing.GroupLayout(dichotomyJP);
        dichotomyJP.setLayout(dichotomyJPLayout);
        dichotomyJPLayout.setHorizontalGroup(
                dichotomyJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(dichotomyJPLayout.createSequentialGroup()
                                .addGroup(dichotomyJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(dichotomyJPLayout.createSequentialGroup()
                                                .addGap(35, 35, 35)
                                                .addGroup(dichotomyJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(aEndpointJLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE)
                                                        .addComponent(bEndpointJLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE)
                                                        .addComponent(dichotomyPrecisionJL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGroup(dichotomyJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dichotomyJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                                .addComponent(precisionJTF, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                                                                .addComponent(bEndpointJTF))
                                                        .addComponent(aEndpointJTF, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addComponent(dichotomySolveJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(dichotomyJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(functionValueJTF, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, dichotomyJPLayout.createSequentialGroup()
                                                        .addGroup(dichotomyJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                                .addComponent(dichotomyENOIJL, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGroup(dichotomyJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, dichotomyJPLayout.createSequentialGroup()
                                                                                .addGap(34, 34, 34)
                                                                                .addGroup(dichotomyJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                                                        .addComponent(dichotomySolutionJL, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                        .addComponent(dichotomyNOIJL, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                                        .addGroup(dichotomyJPLayout.createSequentialGroup()
                                                                                .addContainerGap()
                                                                                .addComponent(dichotomyFunctionValueJL, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                                        .addGroup(dichotomyJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                .addGroup(dichotomyJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                                        .addGroup(dichotomyJPLayout.createSequentialGroup()
                                                                                .addGap(31, 31, 31)
                                                                                .addComponent(dichotomyNOIJTF, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dichotomyJPLayout.createSequentialGroup()
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                                .addComponent(solutionJTF, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dichotomyJPLayout.createSequentialGroup()
                                                                        .addGap(31, 31, 31)
                                                                        .addComponent(dichotomyENOIJTF, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                                .addContainerGap(318, Short.MAX_VALUE))
        );
        dichotomyJPLayout.setVerticalGroup(
                dichotomyJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(dichotomyJPLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(dichotomyJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(aEndpointJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(aEndpointJTF, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(dichotomyJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(bEndpointJTF, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(bEndpointJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(11, 11, 11)
                                .addGroup(dichotomyJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(dichotomyPrecisionJL, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(precisionJTF, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(dichotomySolveJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(dichotomyJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(solutionJTF, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(dichotomySolutionJL, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(dichotomyJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(dichotomyFunctionValueJL, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(functionValueJTF, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(8, 8, 8)
                                .addGroup(dichotomyJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(dichotomyNOIJTF, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(dichotomyNOIJL, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(dichotomyJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(dichotomyENOIJTF, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(dichotomyENOIJL, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(270, Short.MAX_VALUE))
        );

        dichotomyENOIJL.getAccessibleContext().setAccessibleName("");

        mainJTP.addTab("Dichotomy", dichotomyJP);

        xZeroJL.setText("x zero");

        approximateSolutionJL.setText("approximate solution");

        derivativeMinimumJL.setText("deirvative minimum");

        sodmJL.setText("second order derivative maximum");

        newtonPrecisionJL.setText("precision");

        newtonSolveJB.setText("solve");
        newtonSolveJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newtonSolveJBActionPerformed(evt);
            }
        });

        newtonSolutionJL.setText("solution");

        newtonFunctionValueJL.setText("FUNCTION value");

        newtonNOIJL.setText("number of iterations");

        newtonENOIJL.setText("expected number of iterations");

        javax.swing.GroupLayout newtonJPLayout = new javax.swing.GroupLayout(newtonJP);
        newtonJP.setLayout(newtonJPLayout);
        newtonJPLayout.setHorizontalGroup(
                newtonJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(newtonJPLayout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addGroup(newtonJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(newtonFunctionValueJL, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(newtonSolutionJL, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(newtonPrecisionJL, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(xZeroJL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(approximateSolutionJL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(derivativeMinimumJL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(sodmJL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(newtonNOIJL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(newtonENOIJL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(newtonJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(approximateSolutionJTF, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(xZeroJTF, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(derivativeMinimumJTF, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(sodmJTF, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(newtonPrecisionJTF, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(newtonSolveJB, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(newtonSolutionJTF, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(newtonFunctionValueJTF, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(newtonNOIJTF, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(newtonENOIJTF, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(251, 251, 251))
        );
        newtonJPLayout.setVerticalGroup(
                newtonJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(newtonJPLayout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addGroup(newtonJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(xZeroJTF, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(xZeroJL, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(newtonJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(approximateSolutionJL, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(approximateSolutionJTF, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(newtonJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(derivativeMinimumJL, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                                        .addComponent(derivativeMinimumJTF, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(newtonJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(sodmJL, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(sodmJTF, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(newtonJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(newtonPrecisionJL, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(newtonPrecisionJTF, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(newtonSolveJB, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 103, Short.MAX_VALUE)
                                .addGroup(newtonJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(newtonSolutionJL, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(newtonSolutionJTF, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(newtonJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(newtonFunctionValueJTF)
                                        .addComponent(newtonFunctionValueJL, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(newtonJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(newtonNOIJL, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(newtonNOIJTF, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(newtonJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(newtonENOIJL, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(newtonENOIJTF, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(95, 95, 95))
        );

        mainJTP.addTab("Newton", newtonJP);

        systemPrecisionJL.setText("precision");

        straightForwardSolutionJL.setText("straight-forwward x");

        iterateSolutionJL.setText("iterative x");

        conditionNumberJL.setText("condition number");

        determinantJL.setText("determinant of A");

        inverseMatrixJL.setText("inverse matrix");

        matrixProductJL.setText("matrix product");

        solveSystemJB.setText("solve");
        solveSystemJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                solveSystemJBActionPerformed(evt);
            }
        });

        inverseMatrixJTA.setColumns(20);
        inverseMatrixJTA.setRows(5);
        jScrollPane1.setViewportView(inverseMatrixJTA);

        matrixProductJTA.setColumns(20);
        matrixProductJTA.setRows(5);
        jScrollPane2.setViewportView(matrixProductJTA);
        matrixProductJTA.getAccessibleContext().setAccessibleName("");

        systemInitialSolutionJL.setText("initial solution");

        javax.swing.GroupLayout systemJLLayout = new javax.swing.GroupLayout(systemJL);
        systemJL.setLayout(systemJLLayout);
        systemJLLayout.setHorizontalGroup(
                systemJLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(systemJLLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(systemJLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(systemJLLayout.createSequentialGroup()
                                                .addGroup(systemJLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(inverseMatrixJL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(matrixProductJL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addGap(34, 34, 34)
                                                .addGroup(systemJLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(systemJLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                                .addComponent(determinantJTF, javax.swing.GroupLayout.Alignment.LEADING)
                                                                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 542, Short.MAX_VALUE)
                                                                .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING))
                                                        .addComponent(iterativeSolutionJTF, javax.swing.GroupLayout.PREFERRED_SIZE, 542, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(systemJLLayout.createSequentialGroup()
                                                .addGroup(systemJLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(systemJLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                                .addComponent(systemInitialSolutionJL, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                                                                .addComponent(systemPrecisionJL, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE))
                                                        .addGroup(systemJLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                                .addComponent(determinantJL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addComponent(conditionNumberJL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addComponent(iterateSolutionJL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addComponent(straightForwardSolutionJL, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(systemJLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(systemPrecisionJTF)
                                                        .addComponent(systemInitialSolutionJTF)
                                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, systemJLLayout.createSequentialGroup()
                                                                .addGap(0, 0, Short.MAX_VALUE)
                                                                .addComponent(conditionNumberJTF, javax.swing.GroupLayout.PREFERRED_SIZE, 542, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addComponent(straightForwardSolutionJTF)
                                                        .addComponent(solveSystemJB, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                .addGap(13, 13, 13))
        );
        systemJLLayout.setVerticalGroup(
                systemJLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, systemJLLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(systemJLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(systemPrecisionJL, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(systemPrecisionJTF, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(systemJLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(systemInitialSolutionJL, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(systemInitialSolutionJTF, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(19, 19, 19)
                                .addComponent(solveSystemJB, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(systemJLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(straightForwardSolutionJL, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(straightForwardSolutionJTF, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(systemJLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(iterateSolutionJL, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(iterativeSolutionJTF, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(systemJLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(conditionNumberJL, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(conditionNumberJTF, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(systemJLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(determinantJL, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(determinantJTF, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(systemJLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(inverseMatrixJL, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(systemJLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(matrixProductJL, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(31, Short.MAX_VALUE))
        );

        straightForwardSolutionJTF.getAccessibleContext().setAccessibleName("");
        iterativeSolutionJTF.getAccessibleContext().setAccessibleName("");
        conditionNumberJTF.getAccessibleContext().setAccessibleName("");
        determinantJTF.getAccessibleContext().setAccessibleName("");
        solveSystemJB.getAccessibleContext().setAccessibleName("");
        systemInitialSolutionJTF.getAccessibleContext().setAccessibleName("");

        mainJTP.addTab("System solution", systemJL);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(mainJTP)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(mainJTP)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void dichotomySolveJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dichotomySolveJButtonActionPerformed
        String a = this.aEndpointJTF.getText();
        String b = this.bEndpointJTF.getText();
        String precision = this.precisionJTF.getText();

        try {
            this.dichotomyMethodManager.setEndpoints(a, b);
            this.dichotomyMethodManager.solve(precision);

            this.solutionJTF.setText(String.valueOf(this.dichotomyMethodManager.getSolution()));
            this.functionValueJTF.setText(String.valueOf(this.dichotomyMethodManager.getFunctionValue()));
            this.dichotomyNOIJTF.setText(String.valueOf(this.dichotomyMethodManager.getNumOfIterations()));
            this.dichotomyENOIJTF.setText(String.valueOf(this.dichotomyMethodManager.getExpectedNumOfIterations()));
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }//GEN-LAST:event_dichotomySolveJButtonActionPerformed

    private void newtonSolveJBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newtonSolveJBActionPerformed
        String xZero = this.xZeroJTF.getText();
        String approximateSolution = this.approximateSolutionJTF.getText();
        String derivativeMinimum = this.derivativeMinimumJTF.getText();
        String sodm = this.sodmJTF.getText();
        String precision = this.newtonPrecisionJTF.getText();

        try {
            this.newtonMethodManager.setParameters(xZero, approximateSolution, derivativeMinimum, sodm);
            this.newtonMethodManager.solve(precision);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }

        this.newtonSolutionJTF.setText(String.valueOf(this.newtonMethodManager.getSolution()));
        this.newtonFunctionValueJTF.setText(String.valueOf(this.newtonMethodManager.getFunctionValue()));
        this.newtonNOIJTF.setText(String.valueOf(this.newtonMethodManager.getNumOfIterations()));
        this.newtonENOIJTF.setText(String.valueOf(this.newtonMethodManager.getExpectedNumOfIterations()));

    }//GEN-LAST:event_newtonSolveJBActionPerformed

    private void solveSystemJBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_solveSystemJBActionPerformed
        this.squareRootMethodManager.solve();

        this.straightForwardSolutionJTF.setText(this.squareRootMethodManager.getStraightForwardSolution());
        this.conditionNumberJTF.setText(String.valueOf(this.squareRootMethodManager.getConditionNumber()));
        this.determinantJTF.setText(String.valueOf(this.squareRootMethodManager.getDeterminant()));

        this.inverseMatrixJTA.setText(this.squareRootMethodManager.getInverseMatrix());
        this.matrixProductJTA.setText(this.squareRootMethodManager.getMatrixProduct());

        if (!this.systemPrecisionJTF.getText().equals("")) {
            this.jakobiMethodManager.solve(
                    this.systemPrecisionJTF.getText(),
                    this.systemInitialSolutionJTF.getText()
            );

            this.iterativeSolutionJTF.setText(this.jakobiMethodManager.getIterativeSolution());
        }
    }//GEN-LAST:event_solveSystemJBActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel aEndpointJLabel;
    private javax.swing.JTextField aEndpointJTF;
    private javax.swing.JLabel approximateSolutionJL;
    private javax.swing.JTextField approximateSolutionJTF;
    private javax.swing.JLabel bEndpointJLabel;
    private javax.swing.JTextField bEndpointJTF;
    private javax.swing.JLabel conditionNumberJL;
    private javax.swing.JTextField conditionNumberJTF;
    private javax.swing.JLabel derivativeMinimumJL;
    private javax.swing.JTextField derivativeMinimumJTF;
    private javax.swing.JLabel determinantJL;
    private javax.swing.JTextField determinantJTF;
    private javax.swing.JLabel dichotomyENOIJL;
    private javax.swing.JTextField dichotomyENOIJTF;
    private javax.swing.JLabel dichotomyFunctionValueJL;
    private javax.swing.JPanel dichotomyJP;
    private javax.swing.JLabel dichotomyNOIJL;
    private javax.swing.JTextField dichotomyNOIJTF;
    private javax.swing.JLabel dichotomyPrecisionJL;
    private javax.swing.JLabel dichotomySolutionJL;
    private javax.swing.JButton dichotomySolveJButton;
    private javax.swing.JTextField functionValueJTF;
    private javax.swing.JLabel inverseMatrixJL;
    private javax.swing.JTextArea inverseMatrixJTA;
    private javax.swing.JLabel iterateSolutionJL;
    private javax.swing.JTextField iterativeSolutionJTF;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane mainJTP;
    private javax.swing.JLabel matrixProductJL;
    private javax.swing.JTextArea matrixProductJTA;
    private javax.swing.JLabel newtonENOIJL;
    private javax.swing.JTextField newtonENOIJTF;
    private javax.swing.JLabel newtonFunctionValueJL;
    private javax.swing.JTextField newtonFunctionValueJTF;
    private javax.swing.JPanel newtonJP;
    private javax.swing.JLabel newtonNOIJL;
    private javax.swing.JTextField newtonNOIJTF;
    private javax.swing.JLabel newtonPrecisionJL;
    private javax.swing.JTextField newtonPrecisionJTF;
    private javax.swing.JLabel newtonSolutionJL;
    private javax.swing.JTextField newtonSolutionJTF;
    private javax.swing.JButton newtonSolveJB;
    private javax.swing.JTextField precisionJTF;
    private javax.swing.JLabel sodmJL;
    private javax.swing.JTextField sodmJTF;
    private javax.swing.JTextField solutionJTF;
    private javax.swing.JButton solveSystemJB;
    private javax.swing.JLabel straightForwardSolutionJL;
    private javax.swing.JTextField straightForwardSolutionJTF;
    private javax.swing.JLabel systemInitialSolutionJL;
    private javax.swing.JTextField systemInitialSolutionJTF;
    private javax.swing.JPanel systemJL;
    private javax.swing.JLabel systemPrecisionJL;
    private javax.swing.JTextField systemPrecisionJTF;
    private javax.swing.JLabel xZeroJL;
    private javax.swing.JTextField xZeroJTF;
    // End of variables declaration//GEN-END:variables

    private DichotomyMethodManager dichotomyMethodManager;
    private NewtonMethodManager newtonMethodManager;
    private SquareRootMethodManager squareRootMethodManager;
    private JakobiMethodManager jakobiMethodManager;
}
